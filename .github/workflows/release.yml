name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        include:
          - os: macos-latest
            platform: mac
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: win

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Build TypeScript and webpack
        run: npm run build

      - name: Build Electron app (Windows)
        if: matrix.os == 'windows-latest'
        run: npm run dist -- --win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Electron app (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          npm run dist -- --mac
          npm run dist -- --mac mas
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CSC_LINK: ${{ secrets.MAC_CERTS }}
          CSC_KEY_PASSWORD: ${{ secrets.MAC_CERTS_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASS: ${{ secrets.APPLE_ID_PASS }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

      - name: Build Electron app (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: npm run dist -- --linux
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-distributables
          path: |
            release/*.exe
            release/*.dmg
            release/*.pkg
            release/*.AppImage
            release/*.deb
            release/*.snap
            release/*.yml
            release/*.yaml

  release:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: LocalListen ${{ github.ref }}
          body: |
            ## LocalListen Release ${{ github.ref_name }}
            
            ### Downloads
            
            #### Windows
            - `LocalListen-Setup-*.exe` - Windows installer
            
            #### macOS
            - `LocalListen-*.dmg` - macOS installer
            - `LocalListen-*.pkg` - Mac App Store package
            
            #### Linux
            - `LocalListen-*.AppImage` - Universal Linux app
            - `LocalListen-*.deb` - Debian/Ubuntu package
            
            ### Installation Instructions
            
            **Windows:** Download and run the .exe installer
            
            **macOS:** Download the .dmg file, open it, and drag LocalListen to Applications
            
            **Linux:** 
            - AppImage: Make executable with `chmod +x` and run
            - DEB: Install with `sudo dpkg -i LocalListen-*.deb`
            
            ### Requirements
            - No FFmpeg installation required - it's bundled!
            - Speaches service for transcription (optional)
            - Ollama service for AI analysis (optional)
          draft: true
          prerelease: false

      - name: Upload Release Assets
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs').promises;
            const path = require('path');
            
            const releaseId = '${{ steps.create_release.outputs.id }}';
            
            async function uploadReleaseAssets(dir) {
              const files = await fs.readdir(dir);
              
              for (const file of files) {
                const filePath = path.join(dir, file);
                const stat = await fs.stat(filePath);
                
                if (stat.isDirectory()) {
                  await uploadReleaseAssets(filePath);
                } else if (
                  file.endsWith('.exe') || 
                  file.endsWith('.dmg') || 
                  file.endsWith('.pkg') ||
                  file.endsWith('.AppImage') || 
                  file.endsWith('.deb') ||
                  file.endsWith('.snap')
                ) {
                  console.log(`Uploading ${file}...`);
                  const data = await fs.readFile(filePath);
                  
                  await github.rest.repos.uploadReleaseAsset({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    release_id: releaseId,
                    name: file,
                    data: data
                  });
                }
              }
            }
            
            await uploadReleaseAssets('release-artifacts');